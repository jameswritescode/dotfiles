# General

snippet def
def ${1:method_name}
  ${0:# statements}
end
endsnippet

snippet if
if ${1:condition}
  ${0:# statements}
end
endsnippet

snippet ife
if ${1:condition}
  ${2:# statements}
else
  ${0:# statements}
end
endsnippet

snippet frozen
# frozen_string_literal: true
endsnippet

snippet class
class ${1:Name}
  def initialize(${2:args})
    ${0:# statements}
  end
end
endsnippet

snippet classe
class ${1:Name} < ${2:Name}
  def initialize(${3:args})
    ${0:# statements}
  end
end
endsnippet

snippet private
private

def ${1:name}(${2:args})
  ${0:# statements}
end
endsnippet

snippet init
def initialize(${1:args})
  ${0:# statements}
end
endsnippet

snippet mod
module ${1:Name}
  ${0:# statements}
end
endsnippet

snippet ext
extends ${0:Name}
endsnippet

snippet inc
includes ${0:Name}
endsnippet

snippet req
require '${0:name}'
endsnippet

# Rails

snippet controller
class ${1:Name}Controller < ApplicationController
  def ${2:index}
    ${0:# statements}
  end
end
endsnippet

snippet model
class ${1:Name} < ApplicationRecord
  ${0:# statements}
end
endsnippet

snippet hm "has_many"
has_many :${1:name}, dependent: ${2::destroy}, inverse_of: ${0}
endsnippet

snippet bt "belongs_to"
belongs_to :${1:name}
endsnippet

snippet crud
def index
end

def show
end

def new
end

def create
end

def edit
end

def update
end

def destroy
end
endsnippet

snippet d "Destructure"
${1:variables} = ${2:hash}.values_at(${0:values})
endsnippet
