global !p
def to_camel(name):
    return re.sub('^[a-z]', lambda x: x.group(0).upper(), name)
endglobal

# General

snippet fun "Function"
function ${1:name}(${2:arguments}) {
  ${0:// statements}
}
endsnippet

snippet inst "Instance Method"
${1:name} = (${2:arguments}) => {
  ${0:// statements}
}
endsnippet

snippet const "Constant"
const ${1:name} = $0;
endsnippet

snippet let
let ${1:name} = $0;
endsnippet

snippet if
if (${1:arguments}) {
  ${0:// statements}
}
endsnippet

snippet ife
if (${1:arguments}) {
  ${2:// statements}
} else {
  ${0:// statements}
}
endsnippet

snippet class
class ${1:ClassName} {
  ${0:// statements}
}
endsnippet

snippet classe "class ... extends"
class ${1:ClassName} extends ${2:ClassName} {
  ${0:// statements}
}
endsnippet

snippet d "Destructure"
${1:const} { ${0:values} } = ${2:object};
endsnippet

snippet de "debugger"
debugger;
endsnippet

snippet try
try {
  ${1:// statements}
} catch (e) {
  ${0:// statements}
}
endsnippet

# React

snippet hoc "React HOC"
import React from 'react';

export default function `!p snip.rv = snip.basename`(WrappedComponent) {
  function `!p snip.rv = to_camel(snip.basename)`(props) {
    ${0:// statements}
    return <WrappedComponent {...props} />;
  }

  const wrappedComponentName = WrappedComponent.displayName
    || WrappedComponent.name
    || 'Component';

  `!p snip.rv = to_camel(snip.basename)`.displayName = \``!p snip.rv = snip.basename`(${wrappedComponentName})\`

  return `!p snip.rv = to_camel(snip.basename)`;
}
endsnippet

snippet rc "React Component"
import PropTypes from 'prop-types';
import React, { Component } from 'react';

class `!p snip.rv = snip.basename` extends Component {
  static propTypes = {
  }

  static defaultProps = {
  }

  state = {
  }

  render() {
    return (
      ${0:// statements}
    );
  }
}

export default `!p snip.rv = snip.basename`;
endsnippet

snippet rf "React Function"
import PropTypes from 'prop-types';
import React from 'react';

function `!p snip.rv = snip.basename`(${1:props}) {
  return (
    ${0:// statements}
  );
}

`!p snip.rv = snip.basename`.propTypes = {
};

`!p snip.rv = snip.basename`.defaultProps = {
};

export default `!p snip.rv = snip.basename`;
endsnippet

snippet dst "Destructuring State"
${1:const} { ${0:variables} } = this.state;
endsnippet

snippet dpr "Destructuring Props"
${1:const} { ${0:variables} } = this.props;
endsnippet

snippet defpc "Component.defaultProps" b
`!p snip.rv = snip.basename`.defaultProps = {
  ${1:key}: ${0:value},
};
endsnippet

snippet defp "defaultProps" i
defaultProps = {
  ${1:key}: ${0:value},
};
endsnippet

snippet ptd "propTypes" i
propTypes = {
  ${1:key}: PropTypes.${0},
};
endsnippet

snippet ptdc "propTypes" i
`!p snip.rv = snip.basename`.propTypes = {
  ${1:key}: PropTypes.${0},
};
endsnippet

snippet ptst "PropType.string"
PropType.string${0:.isRequired}
endsnippet

snippet ptn "PropType.number"
PropType.number${0:.isRequired}
endsnippet

snippet ptsh "PropType.shape"
PropType.shape({
  ${2:key}: ${0:value},
})${1:.isRequired}
endsnippet

snippet iintl "import intl from 'react-intl-universal'"
import intl from 'react-intl-universal';
endsnippet

snippet styled "import styled from 'styled-components'"
import styled from 'styled-components';
endsnippet

snippet me "module.exports"
module.exports = ${0}
endsnippet
